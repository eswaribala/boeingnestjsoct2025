#create use api project
nest new my-nest-app
#create subfolder users under src
#if you want to use nest
nest g module users
nest g resolver users --no-spec
nest g service users --no-spec



#if you are in project folder
npx nx g @nx/nest:module users
npx nx g @nx/nest:resolver users --no-spec
npx nx g @nx/nest:service users --no-spec

#install graphql lib
npm i @nestjs/graphql @nestjs/apollo graphql graphql-tag class-validator class-transformer


#add graphql module in app module
GraphQLModule.forRoot<ApolloDriverConfig>({
    autoSchemaFile: 'schema.gql',
    driver: ApolloDriver,
    playground: true,
    sortSchema: true,
    path: '/graphql',
  }),


#create dto
// src/books/dto/book.types.ts
import { Field, ID, ObjectType, InputType, Int } from '@nestjs/graphql';
import { IsInt, IsNotEmpty, IsOptional, IsString, Min } from 'class-validator';

@ObjectType()
export class Book {
  @Field(() => ID) id: string;
  @Field() title: string;
  @Field() author: string;
  @Field(() => Int) pages: number;
}

@InputType()
export class CreateBookInput {
  @Field() @IsString() @IsNotEmpty() title: string;
  @Field() @IsString() @IsNotEmpty() author: string;
  @Field(() => Int) @IsInt() @Min(1) pages: number;
}

@InputType()
export class UpdateBookInput {
  @Field(() => ID) id: string;
  @Field({ nullable: true }) @IsOptional() @IsString() title?: string;
  @Field({ nullable: true }) @IsOptional() @IsString() author?: string;
  @Field(() => Int, { nullable: true }) pages?: number;
}

#install faker library
 npm install @faker-js/faker
npm i @as-integrations/express5
npm run start:dev
Open http://localhost:3000/graphql 

==================================
mutation($input:CreateUserInput!){
  createUser(input:$input){
     userId
  }
}

Input---Query variable
{
  "input": {
     "firstName":"Paramswari",
    "lastName":"Bala",
    "email":"param@gmail.com",
    "contactNumber":9952032862,
    "password":"Test@123"
  }
}
